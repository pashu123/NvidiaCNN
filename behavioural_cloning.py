# -*- coding: utf-8 -*-
"""Behavioural Cloning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fP8kPbqkUJVYMUFXc7TNUxfriGYe_RlL
"""


## This model is based on https://arxiv.org/abs/1604.07316 (End to end learning to self driving cars)
#!git clone https://github.com/pashu123/NvidiaCNN

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.optimizers import Adam
from keras.layers import Conv2D,MaxPooling2D,Dropout,Flatten,Dense
import cv2
import pandas as pd
import random
import os
import ntpath
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
import matplotlib.image as mpimg

#!ls NvidiaCNN

datadir = 'NvidiaCNN'
columns = ['center','left','right','steering','throttle','reverse','speed']
data = pd.read_csv(os.path.join(datadir,'driving_log.csv'),names = columns)
pd.set_option('display.max_colwidth',-1)
data.head()

def path_leaf(path):
  head,tail = ntpath.split(path)
  return tail

data['center'] = data['center'].apply(path_leaf)
data['left'] = data['left'].apply(path_leaf)
data['right'] = data['right'].apply(path_leaf)
data.head()

num_bins = 25
samples_per_bin = 200
hist,bins = np.histogram(data['steering'],num_bins)
center = (bins[:-1] + bins[1:]) * 0.5
plt.bar(center,hist,width = 0.05)
plt.plot((np.min(data['steering']),np.max(data['steering'])),(samples_per_bin,samples_per_bin))

print(f'total data: {len(data)}')
remove_list = []
for j in range(num_bins):
  list_ = []
    for i in range(len(data['steering'])):
        if data['steering'][i] >= bins[j] and data['steering'][i] <= bins[j+1]:
            list_.append(i)
    list_ = shuffle(list_)
    list_ = list_[samples_per_bin:]
    remove_list.extend(list_)
print(f'removed: {len(remove_list)}')
data.drop(data.index[remove_list],inplace = True)
print(f'remaining data: {len(data)}')
hist,_ = np.histogram(data['steering'],(num_bins))
plt.bar(center,hist,width = 0.05)
plt.plot((np.min(data['steering']),np.max(data['steering'])),(samples_per_bin,samples_per_bin))

print(data.iloc[100])
def load_img_steering(datadir,df):
  image_path = []
  steering = []
    for i in range(len(data)):
        indexed_data = data.iloc[i]
        center,left,rigt = indexed_data[0],indexed_data[1],indexed_data[2]
        image_path.append(os.path.join(datadir,center.strip()))
        steering.append(float(indexed_data[3]))
    image_paths = np.asarray(image_path)
    steerings = np.asarray(steering)
    return image_path,steerings

image_paths,steerings = load_img_steering(datadir + '/IMG',data)

X_train,X_valid,y_train,y_valid = train_test_split(image_paths,steerings,test_size = 0.2,random_state = 6)
print(f'Training Samples :{len(X_train)} , Validation Samples : {len(X_valid)}')

fig,axes = plt.subplots(1,2,figsize = (12,4))
axes[0].hist(y_train,bins = num_bins ,width = 0.05,color = 'blue')
axes[0].set_title('Training set')
axes[1].hist(y_valid,bins = num_bins ,width = 0.05,color = 'red')
axes[1].set_title('Validation set')

# 200 * 66 is the required image width of the nvidia model
def img_preprocess(img):
    img = mpimg.imread(img)
    img = img[60:125,:,:]
    img = cv2.cvtColor(img,cv2.COLOR_RGB2YUV)
    img = cv2.GaussianBlur(img,(3,3),0)
    img = cv2.resize(img,(200,66))
    img = img/255
    return img

image = image_paths[100]
original_img = mpimg.imread(image)
preprocessed_image = img_preprocess(image)

fig,axes = plt.subplots(1,2,figsize = (15,10))
fig.tight_layout()
axes[0].imshow(original_img)
axes[0].set_title('Original Image')
axes[1].imshow(preprocessed_image)
axes[1].set_title('Preprocessed Image')

X_train = np.array(list(map(img_preprocess,X_train)))
X_valid = np.array(list(map(img_preprocess,X_valid)))

plt.imshow(X_train[random.randint(0,len(X_train)-1)])
plt.axis('off')
print(X_train.shape)

# Started with relu which dies so used elu activation function
def nvidia_model():
    model = Sequential()
    model.add(Conv2D(24,5,5,subsample = (2,2),input_shape = (66,200,3),activation = 'elu'))
    model.add(Conv2D(36,5,5,subsample = (2,2),activation = 'elu'))
    model.add(Conv2D(48,5,5,subsample = (2,2),activation = 'elu'))
    model.add(Conv2D(64,3,3,activation = 'elu'))
    model.add(Conv2D(64,3,3,activation = 'elu'))
    model.add(Flatten())
    model.add(Dense(100,activation = 'elu'))
    model.add(Dropout(0.5))
    model.add(Dense(50,activation = 'elu'))
    model.add(Dropout(0.5))
    model.add(Dense(10,activation = 'elu'))
    model.add(Dropout(0.5))
    model.add(Dense(1))
    model.compile(loss = 'mse',optimizer = Adam(lr=1e-3))
    return model

model = nvidia_model()
model.summary()

history = model.fit(X_train,y_train,epochs = 30,validation_data = (X_valid,y_valid),batch_size = 50,verbose = 1,shuffle = 1)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['training','validation'])
plt.title('loss')
plt.xlabel('Epoch')

model.save('model.h5')

from google.colab import files
files.download('model.h5')

